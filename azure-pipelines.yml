name: 1.0.1$(Rev:.r)

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: PowerShell@2
  displayName: install dolt
  inputs:
    targetType: inline
    failOnStderr: true
    errorActionPreference: stop
    script: |
      $doltPath = Join-Path (Get-Location) "dolt"
      $doltZip = Join-Path (Get-Location) "dolt.zip"
      
      Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') Downloading dolt"
      $client = new-object System.Net.WebClient
      $client.DownloadFile("https://github.com/dolthub/dolt/releases/download/v0.21.0/dolt-windows-amd64.zip", $doltZip)
      
      Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') Extracting dolt"
      Expand-Archive -Path $doltZip -DestinationPath $doltPath
      
      $doltPath = Join-Path $doltPath 'dolt-windows-amd64'
      $doltPath = Join-Path $doltPath 'bin'
      $env:PATH += ";$doltPath"
      Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') Paht set to $($env:PATH)"
      
      Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') Checking if dolt is in the path"
      $ret = Start-Process -FilePath "dolt.exe" -ArgumentList 'version' -NoNewWindow -Wait -PassThru
      Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') Dolt check terminated with code $($ret.ExitCode)"
      exit($ret.ExitCode)
      
- task: DotNetCoreCLI@2
  displayName: restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    verbosityRestore: normal
    includeNuGetOrg: true

- task: VSBuild@1
  displayName: build
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:Version=$(build.buildNumber) /p:GeneratePackageOnBuild=true /p:PackageOutputPath="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    maximumCpuCount: true #enable parallel build
    logFileVerbosity: minimal

- task: DotNetCoreCLI@2
  displayName: test
  inputs:
    command: test
    projects: 'test/**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage" -p:ParallelizeTestCollections=true'

- task: DotNetCoreCLI@2
  displayName: 'push to project feed'
  inputs:
    command: 'push'
    searchPatternPush: '$(Build.ArtifactStagingDirectory)/**/*.*pkg'
    includesymbols: true
    includesource: true
    publishVstsFeed: 'Grillisoft.Configuration/configuration'

#  - task: NuGetCommand@2
#    displayName: 'NuGet push nuget.org feed'
#    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/stable'))
#    inputs:
#      command: push
#      nuGetFeedType: external
#      publishFeedCredentials: nuget.org